esphome:
  name: esp32-mini-sdcard-spi
  friendly_name: esp32_mini_sdcard_spi


esp32:
  board: esp32dev
  framework:
    type: esp-idf


external_components:
  - source: github://shaikat21/esp32_sdspi
    components: [ sd_spi_card ]

logger:

wifi:
  ssid: "YOUR_SSID"
  password: "YOUR_PASS"

# If needed, enable IDF-style framework or ensure you're not forcing arduino
# esphome:
#   platformio_options:
#     framework: idf

sdspi_card:
  id: my_sd
  cs_pin: GPIO5
  sclk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

# You can then use lambdas etc to call list_root, etc
# Example using on_boot
time:
  - platform: sntp
    id: my_time

sd_spi_card:
  spi_freq: 15000
  cs_pin: GPIO5
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19


sensor:
  # Total space on card
  - platform: sd_spi_card
    type: total_space
    name: "SD Total Space"

  # Used space
  - platform: sd_spi_card
    type: used_space
    name: "SD Used Space"

  # Free space
  - platform: sd_spi_card
    type: free_space
    name: "SD Free Space"

  - platform: sd_spi_card
    type: file_size
    name: "text.txt size"
    path: "/timelog.txt"

  - platform: sd_spi_card
    type: file_size
    name: "Timelog csv size"
    path: "/timelog.csv"

interval:
  - interval: 10s
    then:   #write to text file 
      - lambda: |-
          auto t = id(sntp_time).now();
          if (t.is_valid()) {
            char buf[32];
            snprintf(buf, sizeof(buf), "%04d-%02d-%02d %02d:%02d:%02d",
                     t.year, t.month, t.day_of_month,
                     t.hour, t.minute, t.second);
            id(sd_1).append_file("/timelog.txt", buf);
          }
            
  - interval: 12s
    then:   #write to csv col 1 to 3
      - lambda: |-
          auto t = id(sntp_time).now();
          if (t.is_valid()) {
            char buf[32];
            snprintf(buf, sizeof(buf), "%04d-%02d-%02d %02d:%02d:%02d",
                     t.year, t.month, t.day_of_month,
                     t.hour, t.minute, t.second);
            id(sd_1).csv_append_row("/timelog.csv",
                                    {buf, "Hello", "3"});
            }

  - interval: 15s
    then:  # Count row
      - lambda: |-
          int rows = id(sd_1).csv_row_count("/timelog.csv");
            ESP_LOGI("csv", "Total rows: %d", rows);
          

  - interval: 17s
    then:  # Read col 1 from row 0 - 4
      - lambda: |-
          auto vals = id(sd_1).csv_read_column_range("/timelog.csv", 0, 0, 10); 
          for (auto &v : vals) {
            ESP_LOGI("csv", "Val: %s", v.c_str());
          }

  - interval: 20s
    then:  # Delete row 110 - 150
      - lambda: |-
          id(sd_1).csv_delete_rows("/timelog.csv", 110, 150);
          

  - interval: 30s
    then:  # keep last 100 row
      - lambda: |-
          id(sd_1).csv_keep_last_n("/timelog.csv", 100);
